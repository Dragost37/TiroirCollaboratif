using UnityEngine;

/// <summary>
/// D√©finit un point d'accroche pour les pi√®ces DraggablePart.
/// </summary>
public class SnapPoint : MonoBehaviour
{
    [Header("Identification")]
    [Tooltip("Doit correspondre au champ compatibleSnapTag dans la pi√®ce DraggablePart.")]
    public string snapTag;

    [Header("√âtat")]
    [Tooltip("Indique si ce point est d√©j√† occup√© par une pi√®ce.")]
    public bool occupied;

    /// <summary>
    /// Appel√©e lorsqu'une pi√®ce s'accroche √† ce SnapPoint.
    /// </summary>
    public void OnSnapped(GameObject partGO)
    {
        occupied = true;

        // üîä Optionnel : joue un son si un AudioSource est attach√©
        var audio = GetComponent<AudioSource>();
        if (audio != null)
            audio.Play();

        // üîß Optionnel : notifie un gestionnaire global d‚Äôassemblage s‚Äôil existe
        var asm = FindObjectOfType<AssemblyManager>();
        if (asm != null)
            asm.ValidateStep(partGO);
    }

    /// <summary>
    /// Lib√®re ce point (si la pi√®ce est retir√©e, par exemple).
    /// </summary>
    public void Release()
    {
        occupied = false;
    }

#if UNITY_EDITOR
    // Pour mieux visualiser le snap point dans l'√©diteur
    private void OnDrawGizmos()
    {
        Gizmos.color = occupied ? Color.red : Color.green;
        Gizmos.DrawWireSphere(transform.position, 0.03f);
    }
#endif
}
